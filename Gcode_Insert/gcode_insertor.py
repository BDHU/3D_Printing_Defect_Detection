
start()

def start():
	gcode_file_name = raw_input("Please specify the name of the file with the postfix: ")
	file_object = open(gcode_file_name, "r")
	origin_Z = 0
	Z_val = 0
	num_layers_to_insert_gcode = 3
	layers_till_insert = 0;
	file_line_num = 0
	find_init_Z = True
	# may need update in the future as gcode become more and more complex
	instrucions_to_insert = "\nM28\n"


	with file_object as f:

		contents = f.readlines()

		for line in f:
			# obtrain the Z value
			file_line_num = file_line_num + 1
			if find_init_Z:
				origin_Z = eval_line(line)
				find_init_Z = False
				pass

			Z_val = eval_line(line)
			dif = Z_val-origin_Z
			if dif == 0 and Z_val != 0:
				origin_Z = Z_val
				pass
			# move up to new layers
			if dif != 0 and Z_val != 0:
				origin_Z = Z_val
				layers_till_insert = layers_till_insert + 1
				if layers_till_insert == num_layers_to_insert_gcode:
					# perform insertion, also be very caustion the line number will also
					# add 1
					layers_till_insert = 0
					# file_line_num = file_line_num + 1
					# now it's time to finally perform insertion
					contents.insert(file_line_num-1)

				# We should insert instruction based on number of layers

		f.writelines(contents)
		f.close()


def eval_line(line):
	# In the gcode file generated by makerbot app, most commands will
	# only have "Z" as a parameter, but be cautious
	start = ' Z'
	end = ' '

	if ' Z' in line:
		# get the Z value
		return float(line[line.find(start)+len(start):line.rfind(end)])

	else:
		return 0
